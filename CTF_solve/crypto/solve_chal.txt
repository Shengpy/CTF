from itertools import product
from hashlib import sha256

arr = [2598518492671225, 8179816363958449, 7404314384623807, 5036318129031785, 7561847828708907, 8810344945409856, 6802835477023830, 660775698577317, 6377835037958658, 5165653195950165, 5542182643266967, 8877017134340898, 7019762314080100, 5473217947093964, 5756053470367204, 6532571242263709, 9570025266332532, 7253491621003594, 570694512472223, 3928852819486391, 9419484349130866, 7231862012400760, 8471268887369720, 2064798807663638, 2463399225362608, 2933953912021332, 7404602394427554, 6864510477948829, 5953144542900222, 4727398111173660, 8953568444836994, 6186179598281467, 3950282663156437, 5074454322540355, 929515103368296, 2217898009467944, 7917815503532629, 2666540036871100, 1285546515475019, 6688163578190488]
Sum = 86547527340532708
enc = b'3\xeb$b@\x8e\xa0E\xc8H\x08\xc0H3\x054\x0b\xbc\xb95\x81\xeb\xc1R\x97z\xe0qN\xe90N'
def xor(a, b):
    return bytes([i ^ j for i, j in zip(a, b)])
arr1 = dict()
for mask in product(range(2), repeat=20):
    arr1[sum([i*j for i, j in zip(arr[:len(arr)//2], mask)])] = mask
for mask in product(range(2), repeat=20):
    s1 = sum([i*j for i, j in zip(arr[len(arr)//2:], mask)])
    need = Sum - s1
    if need in arr1:
        key = ''.join(str(i) for i in (arr1[need] + mask))
        key = sha256(key.encode()).digest()
        flag = xor(enc, key)
        print(flag.decode('utf-8'))
        break